#Использовать "../../src"

Перем ПараметрыМонитора;
Перем ПараметрыТестирования;
Перем ВозвращаемыеЗначения;

Перем Лог;

// Процедура устанавливает вывод функции ВыполнитьКоманду мок-исполнителя команд
//
// Параметры:
//    ИсполнительКоманд    - МокИсполнительКоманд      - мок-объект исполнитель команд
//    ПутьКДанным          - Строка                    - Путь к параметрам в структуре параметров монитора
//    
Процедура УстановитьВыводИсполнителяКоманд(ИсполнительКоманд, ПутьКДанным) Экспорт

    Если ТипЗнч(ИсполнительКоманд) = Тип("ИсполнительКоманд") Тогда
        Возврат;
    КонецЕсли;

    МассивПутей = СтрРазделить(ПутьКДанным, ".");

    Данные = ПараметрыМонитора;

    Для Каждого ТекПуть Из МассивПутей Цикл
        Данные = Данные[ТекПуть];
    КонецЦикла;

    ДанныеДляОбработки = Новый Массив();
    Если ТипЗнч(Данные) = Тип("Массив") Тогда
        ДанныеДляОбработки = Данные;
    Иначе
        ДанныеДляОбработки.Добавить(Данные);
    КонецЕсли;

    Для Каждого ТекДанные Из ДанныеДляОбработки Цикл
        ИсполнительКоманд.Когда().ВыполнитьКоманду(ТекДанные.ПараметрыКоманды).ТогдаВозвращает(ТекДанные.ВыводКоманды);
    КонецЦикла;

    ИсполнительКоманд.Когда().КодВозврата().ТогдаВозвращает(0);

КонецПроцедуры // УстановитьВыводИсполнителяКоманд()

Функция Вывод_МенеджерыЛицензийСписок()

    ПараметрыКоманды = Новый Массив();
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("SET CONFIG,FILENAME=" + Монитор_ПутьКФайлуНастроек()));
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("SCAN SERVERS"));
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("GET SERVERS"));

    ВыводКоманды = ВозвращаемыеЗначения["МенеджерыЛицензий"];

    Возврат ОписаниеВыводаКоманды(ПараметрыКоманды, ВыводКоманды);

КонецФункции // Вывод_МенеджерыЛицензийСписок()

Функция Вывод_МодулиСписок()

    ПараметрыКоманды = Новый Массив();
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("SET CONFIG,FILENAME=" + Монитор_ПутьКФайлуНастроек()));
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("SCAN SERVERS"));
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("GET MODULES,ID=" + ИдентификаторМенеджера()));

    ВыводКоманды = ВозвращаемыеЗначения["Модули"];

    Возврат ОписаниеВыводаКоманды(ПараметрыКоманды, ВыводКоманды);

КонецФункции // Вывод_МодулиСписок()

Функция Вывод_ПодключенияСписок()

    ПараметрыКоманды = Новый Массив();
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("SET CONFIG,FILENAME=" + Монитор_ПутьКФайлуНастроек()));
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("SCAN SERVERS"));
    ПараметрыКоманды.Добавить(Служебный.ОбернутьВКавычки("GET LOGINS,ID=" + ИдентификаторМенеджера() + ",MA=1"));

    ВыводКоманды = ВозвращаемыеЗначения["Подключения"];

    Возврат ОписаниеВыводаКоманды(ПараметрыКоманды, ВыводКоманды);

КонецФункции // Вывод_ПодключенияСписок()

Функция Монитор_ПутьКФайлуНастроек()

    Возврат Параметры().Монитор_ПутьКФайлуНастроек;

КонецФункции // Монитор_ПутьКФайлуНастроек()

Функция ИдентификаторМенеджера()

    Возврат Параметры().ИдентификаторМенеджера;

КонецФункции // ИдентификаторМенеджера()

// Возвращает текущие параметры тестового окружения
//
// Параметры:
//    Обновить          - Булево         - Истина - обновить параметры тестирования принудительно
//
// Возвращаемое значение:
//    Структура         - параметры тестового окружения
//
Функция Параметры(Обновить = Ложь) Экспорт

    Если ТипЗнч(ПараметрыТестирования) = Тип("Структура") И НЕ Обновить Тогда
        Возврат ПараметрыТестирования;
    КонецЕсли;

    Параметры = Новый Структура();

    // Проверим что есть "местный" файл параметров тестирования
    ПутьКФайлуПараметров = ОбъединитьПути(ТекущийСценарий().Каталог, "ПараметрыТестирования.txt");

    МакетПараметров = Новый Файл(ПутьКФайлуПараметров);

    // Если "местного" файла нет, то используем файл с параметрами по умолчанию
    Если НЕ МакетПараметров.Существует() Тогда
        ПутьКФайлуПараметров = ОбъединитьПути(ТекущийСценарий().Каталог, "ПараметрыТестирования.ПоУмолчанию.txt");
    КонецЕсли;

    МакетПараметров = Новый Файл(ПутьКФайлуПараметров);

    Если МакетПараметров.Существует() Тогда

        ПараметрыПоУмолчанию = ПрочитатьПараметрыТестированияИзФайла(ПутьКФайлуПараметров);
        
        Для Каждого ТекПараметр Из ПараметрыПоУмолчанию Цикл
            Параметры.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
        КонецЦикла;

        ПараметрыТестирования = Параметры;

    КонецЕсли;
    
    Возврат ПараметрыТестирования;

КонецФункции // Параметры()

Функция ОписаниеВыводаКоманды(ПараметрыКоманды, ВыводКоманды)

    ОписаниеВыводаКоманды = Новый Структура();
    ОписаниеВыводаКоманды.Вставить("ПараметрыКоманды", ПараметрыКоманды);
    ОписаниеВыводаКоманды.Вставить("ВыводКоманды"    , ВыводКоманды);

    Возврат Новый ФиксированнаяСтруктура(ОписаниеВыводаКоманды);

КонецФункции // ОписаниеВыводаКоманды()

Функция ПрочитатьПараметрыТестированияИзФайла(Знач ПутьКФайлу)

    Параметры = Новый Структура();

    МакетПараметров = Новый Файл(ПутьКФайлу);

    Если НЕ МакетПараметров.Существует() Тогда
        Возврат Параметры;
    КонецЕсли;

    ТекстМакета = Новый ТекстовыйДокумент();
    ТекстМакета.Прочитать(МакетПараметров.ПолноеИмя, КодировкаТекста.UTF8);

    Для й = 1 По ТекстМакета.КоличествоСтрок() Цикл

        МассивПараметр = СтрРазделить(ТекстМакета.ПолучитьСтроку(й), "=");

        Если НЕ ЗначениеЗаполнено(МассивПараметр) Тогда
            Продолжить;
        КонецЕсли;

        Если МассивПараметр.Количество() = 1 Тогда
            МассивПараметр.Добавить("");
        КонецЕсли;

        Попытка
            Параметры.Вставить(СокрЛП(МассивПараметр[0]), СокрЛП(МассивПараметр[1]));
        Исключение
            Лог.Отладка("Ошибка чтения параметра """ + СокрЛП(МассивПараметр[0]) + """: " + ОписаниеОшибки());
        КонецПопытки;

    КонецЦикла;

    Возврат Параметры;

КонецФункции // ПрочитатьПараметрыТестированияИзФайла()

Процедура Инициализация()
    
    Лог = Служебный.Лог();

    КаталогФикстур = ТекущийСценарий().Каталог;

    ВозвращаемыеЗначения = ПрочитатьМакетыОбъектовСервера(КаталогФикстур);
    
    ПараметрыМонитора = Новый Структура();

    ПараметрыМонитора.Вставить("МенеджерыЛицензий", Новый Структура("Список"));
    ПараметрыМонитора.МенеджерыЛицензий.Список = Вывод_МенеджерыЛицензийСписок();

    ПараметрыМонитора.Вставить("Модули", Новый Структура("Список"));
    ПараметрыМонитора.Модули.Список = Вывод_МодулиСписок();

    ПараметрыМонитора.Вставить("Подключения", Новый Структура("Список"));
    ПараметрыМонитора.Подключения.Список = Вывод_ПодключенияСписок();

КонецПроцедуры // Инициализация()

Функция ПрочитатьМакетыОбъектовСервера(Знач ПутьККаталогу)

    СтруктураМакетов = Новый Соответствие();

    МассивФайлов = НайтиФайлы(ПутьККаталогу, "Макет_*.txt");

    ДлинаПрефикса = 7;

    Для Каждого ТекМакет Из МассивФайлов Цикл
        ТекстМакета = Новый ТекстовыйДокумент();
        ТекстМакета.Прочитать(ТекМакет.ПолноеИмя, КодировкаТекста.UTF8);

        СтруктураМакетов.Вставить(Сред(ТекМакет.ИмяБезРасширения, ДлинаПрефикса), ТекстМакета.ПолучитьТекст());
    КонецЦикла;

    Возврат СтруктураМакетов;

КонецФункции // ПрочитатьМакетыОбъектовСервера()

Инициализация();