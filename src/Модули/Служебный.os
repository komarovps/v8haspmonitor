#Использовать logos
#Использовать ReadParams

Перем Лог;

Функция Параметры() Экспорт

    ФайлПараметров = ОбъединитьПути(ТекущийКаталог(), "params.json");
        
    ОшибкиЧтения = Неопределено;
    Параметры = ЧтениеПараметров.Прочитать(ФайлПараметров, ОшибкиЧтения);
    
    Для каждого КлючЗначение Из ОшибкиЧтения Цикл		
        Лог.Ошибка( "Ошибка чтения файла params.json " + КлючЗначение.Ключ + ": " + КлючЗначение.Значение );
    КонецЦикла;

    Возврат Параметры;

КонецФункции

Функция РазобратьПотокВывода(Знач Поток) Экспорт
    
    ТД = Новый ТекстовыйДокумент;
    ТД.УстановитьТекст(Поток);
    
    СписокОбъектов = Новый Массив;
    
    Для Сч = 1 По ТД.КоличествоСтрок() Цикл

        Текст = ТД.ПолучитьСтроку(Сч);
        Если НЕ ЗначениеЗаполнено(Текст) 
            ИЛИ СтрНайти(Текст, "OK") > 0
            ИЛИ СтрНайти(Текст, "ERROR") > 0 
            ИЛИ СтрНайти(Текст, "EMPTY") > 0 Тогда
            Продолжить; // пропуск строки
        КонецЕсли;
                
        ТекущийОбъект = Новый Соответствие;
        МассивПараметров = СтрРазделить(Текст, ",");

        Для каждого Параметр Из МассивПараметров Цикл
                    
            СтрокаРазбораИмя      = "";
            СтрокаРазбораЗначение = "";
    
            Если РазобратьНаКлючИЗначение(Параметр, СтрокаРазбораИмя, СтрокаРазбораЗначение) Тогда
                ТекущийОбъект[СтрокаРазбораИмя] = СтрокаРазбораЗначение;
            КонецЕсли;				

        КонецЦикла;
        
        СписокОбъектов.Добавить(ТекущийОбъект);

    КонецЦикла;
        
    Возврат СписокОбъектов;
    
КонецФункции

Функция РазобратьНаКлючИЗначение(Знач СтрокаРазбора, Ключ, Значение)

    ПозицияРазделителя = Найти(СтрокаРазбора, "=");
    Если ПозицияРазделителя = 0 Тогда
        Возврат Ложь;
    КонецЕсли;
    
    Ключ     = СокрЛП(Лев(СтрокаРазбора, ПозицияРазделителя - 1));
    Значение = УбратьКавычки(СокрЛП(Сред(СтрокаРазбора, ПозицияРазделителя + 1)));
    
    Возврат Истина;
    
КонецФункции

// Функция добавляет кавычки в начале и в конце переданной строки
//   
// Параметры:
//   Строка         - Строка        - Строка для добавления кавычек
//
// Возвращаемое значение:
//    Строка - строка с добавленными кавычками
//
Функция ОбернутьВКавычки(Знач Строка) Экспорт
    Если Лев(Строка, 1) = """" И Прав(Строка, 1) = """" Тогда
        Возврат Строка;
    Иначе
        Возврат """" + Строка + """";
    КонецЕсли;
КонецФункции

// Функция убирает кавычки в начале и в конце переданной строки
//   
// Параметры:
//   СтрокаСКавычками - Строка        - Строка для удаления кавычек
//
// Возвращаемое значение:
//    Строка - строка без кавычек
//
Функция УбратьКавычки(Знач СтрокаСКавычками) Экспорт
    
    СтрокаБезКавычек = СтрокаСКавычками;

    Если СтрНачинаетсяС(СтрокаСКавычками, """") Тогда
        СтрокаБезКавычек = Сред(СтрокаБезКавычек, 2);
    КонецЕсли;

    Если СтрЗаканчиваетсяНа(СтрокаСКавычками, """") Тогда
        СтрокаБезКавычек = Лев(СтрокаБезКавычек, СтрДлина(СтрокаБезКавычек) - 1);
    КонецЕсли;

    СтрокаБезКавычек = СтрЗаменить(СтрокаБезКавычек, """""", """");

    Возврат СтрокаБезКавычек;

КонецФункции

// Функция возвращает лог библиотеки
//   
// Возвращаемое значение:
//    Логгер - лог библиотеки
//
Функция Лог() Экспорт
    
    Если Лог = Неопределено Тогда
        Лог = Логирование.ПолучитьЛог(ИмяЛога());
    КонецЕсли;

    Возврат Лог;

КонецФункции // Лог()

// Функция возвращает имя лога библиотеки
//   
// Возвращаемое значение:
//    Строка - имя лога библиотеки
//
Функция ИмяЛога() Экспорт
    Возврат "oscript.lib.v8haspmonitor";
КонецФункции // ИмяЛога()