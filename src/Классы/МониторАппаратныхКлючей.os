#Использовать logos
#Использовать 1commands
#Использовать strings

Перем ПутьКФайлуНастроек; // Путь к файлу nethasp.ini
Перем ИсполнительКоманд;  // Объект класса ИсполнительКоманд

Перем Лог; // Лог

Процедура ПриСозданииОбъекта(Знач НовыйПутьКФайлуНастроек = "", Знач НовыйПутьКУтилитеМониторинга = "")

    Лог = Служебный.Лог();

    Если Не ЗначениеЗаполнено(НовыйПутьКФайлуНастроек) Тогда
        Параметры = Служебный.Параметры();
        НовыйПутьКФайлуНастроек = Параметры["nethasp-path"];  
    КонецЕсли;

    УстановитьПутьКФайлуНастроек(НовыйПутьКФайлуНастроек);

    ИсполнительКоманд = Новый ИсполнительКоманд(НовыйПутьКУтилитеМониторинга); 

КонецПроцедуры

// Возвращает путь к файлу настроек nethasp.ini.
//
//  Возвращаемое значение:
//   Строка - Путь к файлу настроек nethasp.ini.
//
Функция ПутьКФайлуНастроек() Экспорт
    Возврат ПутьКФайлуНастроек;
КонецФункции

// Функция возвращает текущий объект-исполнитель команд
//   
// Возвращаемое значение:
//   ИсполнительКоманд        - текущее значение объекта-исполнителя команд
//
Функция ИсполнительКоманд() Экспорт

    Возврат ИсполнительКоманд;

КонецФункции // ИсполнительКоманд()

// Установить путь к файлу нстроек nethasp.ini.
//
// Параметры:
//   Путь - Строка - Путь к файлу настроек nethasp.ini.
//
Процедура УстановитьПутьКФайлуНастроек(Знач Путь) Экспорт
    ПутьКФайлуНастроек = Путь;
    ФайлНастроек = Новый Файл(ПутьКФайлуНастроек);
    Если Не ФайлНастроек.Существует() Тогда
        ВызватьИсключение "Нельзя установить несуществующий путь к файлу nethasp.ini: " + ФайлНастроек.ПолноеИмя;
    КонецЕсли;
    Лог.Отладка("Путь к файлу nethasp.ini: " + ФайлНастроек.ПолноеИмя);	
КонецПроцедуры

// Установить объект-исполнитель команд
//   
// Параметры:
//   НовыйИсполнитель - ИсполнительКоманд - новый объект-исполнитель команд
//
Процедура УстановитьИсполнительКоманд(Знач НовыйИсполнитель = Неопределено) Экспорт
    ИсполнительКоманд = НовыйИсполнитель;
КонецПроцедуры

// Выполняет команды через монитор аппаратных ключей
//
// Параметры:
//   ПараметрыКоманды - Массив - массив параметров команды 
//
//  Возвращаемое значение:
//   Строка - результат выполнения команды через монитор аппаратных ключей
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт

    ВыводКоманды = ИсполнительКоманд.ВыполнитьКоманду(ПараметрыКоманды);

    Возврат ВыводКоманды;
    
КонецФункции

// Возвращает таблицу менеджеров лицензий HASP (GET SERVERS)
//
// Возвращаемое значение:
//   ТаблицаЗначений - список менеджеров лицензий
//    * Идентификатор - Строка - идентификатор
//    * Имя - Строка - имя
//    * Протокол - Строка - протокол
//    * Версия - Строка - версия
//    * ОперационнаяСистема - Строка - операционная система
//
Функция СписокМенеджеровЛицензий() Экспорт
    
    МенеджерыЛицензий = НоваяТаблицаМенеджеровЛицензий();
    
    Параметры = СтандартныеПараметрыЗапуска();
    Параметры.Добавить(Служебный.ОбернутьВКавычки("GET SERVERS"));

    ВыводКоманды = ВыполнитьКоманду(Параметры);	
    
    Данные = Служебный.РазобратьПотокВывода(ВыводКоманды);
    
    Для Каждого Элемент Из Данные Цикл
        
        ТекСтрока = МенеджерыЛицензий.Добавить();
        ТекСтрока.Идентификатор = Элемент["ID"];
        ТекСтрока.Имя = Элемент["NAME"];
        ТекСтрока.Протокол = Элемент["PROT"];
        ТекСтрока.Версия = Элемент["VER"];
        ТекСтрока.ОперационнаяСистема = Элемент["OS"];

        Лог.ПоляИз(Элемент).Отладка("Получено подключение к менеджеру лицензий");
        
    КонецЦикла;
    
    Возврат МенеджерыЛицензий;
    
КонецФункции

// Возвращает таблицу модулей менеджера лицензий HASP (GET MODULES)
//
// Параметры:
//   ИдентификаторМенеджера - Строка - идентификатор менеджера лицензий
//
// Возвращаемое значение:
//   ТаблицаЗначений - список ключей менеджера лицензий
//    * ИдентификаторМенеджера - Строка - идентификатор менеджера лицензий
//    * АдресМодуля - Строка - адрес модуля MA (Module Address)
//    * Тип - Строка - тип ключа (HASP4, HASPHL)
//    * МаксимальноеКоличествоПодключений - Число - максимальное количество подключений
//    * ТекущееКоличествоПодключений - Число - текущее количество подключений
//
Функция СписокМодулейМенеджераЛицензий(Знач ИдентификаторМенеджера) Экспорт
    
    ТаблицаМодулей = НоваяТаблицаМодулей();
    
    Параметры = СтандартныеПараметрыЗапуска();
    Параметры.Добавить(Служебный.ОбернутьВКавычки(СтрШаблон("GET MODULES,ID=%1", ИдентификаторМенеджера)));

    ВыводКоманды = ВыполнитьКоманду(Параметры);	
    
    Данные = Служебный.РазобратьПотокВывода(ВыводКоманды);
    
    Для Каждого Элемент Из Данные Цикл

        Лог.ПоляИз(Элемент).Отладка("Получен ключ");
        
        ТекСтрока = ТаблицаМодулей.Добавить();
        ТекСтрока.АдресМодуля = Элемент["MA"];
        ТекСтрока.Тип = Элемент["GENERATION"];
        ТекСтрока.ТекущееКоличествоПодключений = Число(Элемент["CURR"]);
        ТекСтрока.ИдентификаторМенеджера = ИдентификаторМенеджера;

        МаксимальноеКоличествоПодключений = Элемент["MAX"]; 
        Если МаксимальноеКоличествоПодключений = "-1" Тогда 
            // У ключей емкостью на 500 и 300, максимальное количество подключений можно получить командой SLOT
            Лог.Отладка("Максимальное количество подключений = -1. Возможно это ключ на 300 или 500 лицензий. 
                |Получаю информацию из слота модуля.");
            МаксимальноеКоличествоПодключений = МаксимальноеКоличествоПодключений(ТекСтрока);
            Лог.Отладка("Максимальное количество подключений = %1", МаксимальноеКоличествоПодключений);
        КонецЕсли;
        ТекСтрока.МаксимальноеКоличествоПодключений = Число(МаксимальноеКоличествоПодключений); 

    КонецЦикла;
    
    Возврат ТаблицаМодулей;
    
КонецФункции

// Возвращает таблицу подключений выбранного ключа HASP
//
// Параметры:
//   ПараметрыКлюча - Структура - параметры ключа 
//                        * ИдентификаторМенедежра - идентификатор менеджера лицензий
//                        * АдресМодуля - адрес модуля (MA)
//
// Возвращаемое значение:
//   ТаблицаЗначений - список подключений
//    * Номер - Строка - порядковый номер
//    * Протокол - Строка - протокол
//    * АдресХоста - Строка - адрес машины получившей лицензию
//    * ИмяХоста - Строка - имя машины получившей лицензию
//    * Таймаут - Строка - таймаут
//
Функция СписокПодключений(Знач ПараметрыКлюча) Экспорт
    
    ТаблицаПодключений = НоваяТаблицаПодключений();
    
    Параметры = СтандартныеПараметрыЗапуска();
    Параметры.Добавить(Служебный.ОбернутьВКавычки(
        СтрШаблон("GET LOGINS,ID=%1,MA=%2", ПараметрыКлюча.ИдентификаторМенеджера, ПараметрыКлюча.АдресМодуля)
        ));

    СписокПодключений = ВыполнитьКоманду(Параметры);	
    
    Данные = Служебный.РазобратьПотокВывода(СписокПодключений);
    
    Для Каждого Элемент Из Данные Цикл

        Лог.ПоляИз(Элемент).Отладка("Получено подключение к ключу");

        ТекСтрока = ТаблицаПодключений.Добавить();
        ТекСтрока.Номер = Элемент["INDEX"];

        ПозицияОткр = Найти(Элемент["PROT"], "(");
        ПозицияЗакр = Найти(Элемент["PROT"], ")");
        // "UDP(127.0.0.1)"
        ТекСтрока.Протокол = Лев(Элемент["PROT"], ПозицияОткр - 1);
        ТекСтрока.АдресХоста = Сред(Элемент["PROT"], ПозицияОткр + 1, ПозицияЗакр - ПозицияОткр - 1);

        ТекСтрока.ИмяХоста = Элемент["NAME"];
        ТекСтрока.Таймаут = Элемент["TIMEOUT"];
        
    КонецЦикла;
    
    Возврат ТаблицаПодключений;
    
КонецФункции

// Возвращает максимальное количество подключений полученное командой SLOTS
//
// Параметры:
//   ПараметрыКлюча - Структура - параметры ключа 
//                        * ИдентификаторМенедежра - идентификатор менеджера лицензий
//                        * АдресМодуля - адрес модуля (MA)
//
// Возвращаемое значение:
//   Строка - максимальное количество подключений
//
Функция МаксимальноеКоличествоПодключений(Знач ПараметрыКлюча)

    МаксимальноеКоличествоПодключений = -1;

    Параметры = СтандартныеПараметрыЗапуска();
    Параметры.Добавить(Служебный.ОбернутьВКавычки(
        СтрШаблон("GET SLOTS,ID=%1,MA=%2", ПараметрыКлюча.ИдентификаторМенеджера, ПараметрыКлюча.АдресМодуля)
        ));

    СписокПодключений = ВыполнитьКоманду(Параметры);	
    
    Данные = Служебный.РазобратьПотокВывода(СписокПодключений);
    
    Для Каждого Элемент Из Данные Цикл
        МаксимальноеКоличествоПодключений = Число(Элемент["MAX"]);
        Лог.ПоляИз(Элемент).Отладка("Получена информация слота ключа");
    КонецЦикла;
    
    Возврат МаксимальноеКоличествоПодключений;

КонецФункции

Функция НоваяТаблицаМенеджеровЛицензий()

    ТаблицаМенеджеров = Новый ТаблицаЗначений;
    ТаблицаМенеджеров.Колонки.Добавить("Идентификатор");
    ТаблицаМенеджеров.Колонки.Добавить("Имя");
    ТаблицаМенеджеров.Колонки.Добавить("Протокол");
    ТаблицаМенеджеров.Колонки.Добавить("Версия");
    ТаблицаМенеджеров.Колонки.Добавить("ОперационнаяСистема");

    Возврат ТаблицаМенеджеров;

КонецФункции

Функция НоваяТаблицаМодулей()

    Таблица = Новый ТаблицаЗначений;
    Таблица.Колонки.Добавить("ИдентификаторМенеджера");
    Таблица.Колонки.Добавить("АдресМодуля");
    Таблица.Колонки.Добавить("Тип");
    Таблица.Колонки.Добавить("МаксимальноеКоличествоПодключений");
    Таблица.Колонки.Добавить("ТекущееКоличествоПодключений");

    Возврат Таблица;

КонецФункции

Функция НоваяТаблицаПодключений()

    ТаблицаПодключений = Новый ТаблицаЗначений;
    ТаблицаПодключений.Колонки.Добавить("Номер");
    ТаблицаПодключений.Колонки.Добавить("АдресХоста");
    ТаблицаПодключений.Колонки.Добавить("ИмяХоста");
    ТаблицаПодключений.Колонки.Добавить("Протокол");
    ТаблицаПодключений.Колонки.Добавить("Таймаут");

    Возврат ТаблицаПодключений;

КонецФункции

Функция СтандартныеПараметрыЗапуска()

    ПараметрыЗапуска = Новый Массив;

    ПараметрыЗапуска.Добавить(Служебный.ОбернутьВКавычки("SET CONFIG,FILENAME=" + Служебный.ОбернутьВКавычки(ПутьКФайлуНастроек)));
    ПараметрыЗапуска.Добавить(Служебный.ОбернутьВКавычки("SCAN SERVERS"));

    Возврат ПараметрыЗапуска; 

КонецФункции